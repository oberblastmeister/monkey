//! Generated file, do not edit by hand, see `xtask/src/codegen`

#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]
pub enum TokenKind {
    KwFn,
    KwLet,
    KwTrue,
    KwFalse,
    KwIf,
    KwElse,
    KwReturn,
    Number,
    String,
    Tilde,
    RParen,
    RBracket,
    Walrus,
    Lt,
    RBrace,
    Bang,
    LBrace,
    LtEq,
    EqEq,
    Minus,
    Slash,
    Semicolon,
    Caret,
    LogicalOr,
    Modulo,
    LBracket,
    Colon,
    Dot,
    BitAnd,
    Eq,
    GtEq,
    LParen,
    ShiftLeft,
    NotEq,
    ShiftRight,
    Plus,
    LogicalAnd,
    BitOr,
    Gt,
    Comma,
    Asterisk,
    Ident,
    Eof,
}
#[macro_export]
macro_rules ! Tok { [~] => { $ crate :: ast :: TokenKind :: Tilde } ; [')'] => { $ crate :: ast :: TokenKind :: RParen } ; [']'] => { $ crate :: ast :: TokenKind :: RBracket } ; [:=] => { $ crate :: ast :: TokenKind :: Walrus } ; [<] => { $ crate :: ast :: TokenKind :: Lt } ; ['}'] => { $ crate :: ast :: TokenKind :: RBrace } ; [!] => { $ crate :: ast :: TokenKind :: Bang } ; ['{'] => { $ crate :: ast :: TokenKind :: LBrace } ; [<=] => { $ crate :: ast :: TokenKind :: LtEq } ; [==] => { $ crate :: ast :: TokenKind :: EqEq } ; [-] => { $ crate :: ast :: TokenKind :: Minus } ; [/] => { $ crate :: ast :: TokenKind :: Slash } ; [;] => { $ crate :: ast :: TokenKind :: Semicolon } ; [^] => { $ crate :: ast :: TokenKind :: Caret } ; [||] => { $ crate :: ast :: TokenKind :: LogicalOr } ; [%] => { $ crate :: ast :: TokenKind :: Modulo } ; ['['] => { $ crate :: ast :: TokenKind :: LBracket } ; [:] => { $ crate :: ast :: TokenKind :: Colon } ; [.] => { $ crate :: ast :: TokenKind :: Dot } ; [&] => { $ crate :: ast :: TokenKind :: BitAnd } ; [=] => { $ crate :: ast :: TokenKind :: Eq } ; [>=] => { $ crate :: ast :: TokenKind :: GtEq } ; ['('] => { $ crate :: ast :: TokenKind :: LParen } ; [<<] => { $ crate :: ast :: TokenKind :: ShiftLeft } ; [!=] => { $ crate :: ast :: TokenKind :: NotEq } ; [>>] => { $ crate :: ast :: TokenKind :: ShiftRight } ; [+] => { $ crate :: ast :: TokenKind :: Plus } ; [&&] => { $ crate :: ast :: TokenKind :: LogicalAnd } ; [|] => { $ crate :: ast :: TokenKind :: BitOr } ; [>] => { $ crate :: ast :: TokenKind :: Gt } ; [,] => { $ crate :: ast :: TokenKind :: Comma } ; [*] => { $ crate :: ast :: TokenKind :: Asterisk } ; [fn] => { $ crate :: ast :: TokenKind :: KwFn } ; [let] => { $ crate :: ast :: TokenKind :: KwLet } ; [true] => { $ crate :: ast :: TokenKind :: KwTrue } ; [false] => { $ crate :: ast :: TokenKind :: KwFalse } ; [if] => { $ crate :: ast :: TokenKind :: KwIf } ; [else] => { $ crate :: ast :: TokenKind :: KwElse } ; [return] => { $ crate :: ast :: TokenKind :: KwReturn } ; [number] => { $ crate :: ast :: TokenKind :: Number } ; [string] => { $ crate :: ast :: TokenKind :: String } ; [ident] => { $ crate :: ast :: TokenKind :: Ident } ; [eof] => { $ crate :: ast :: TokenKind :: Eof } ; }
